{
  "openapi": "3.0.0",
  "info": { "title": "Penless OpenAPI", "version": "1.0" },
  "servers": [{ "url": "http://localhost:3000" }],
  "paths": {
    "/api/flow/{flowId}": {
      "get": {
        "summary": "Get one specific flow",
        "parameters": [
          {
            "in": "path",
            "name": "flowId",
            "required": true,
            "description": "The ID of the flow to retrieve",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "flow object",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/Flow"
                }
              }
            }
          }
        },
        "tags": ["Flow"]
      },
      "post": {
        "summary": "Update one flow (Editing sceniaro)",
        "parameters": [
          {
            "in": "path",
            "name": "flowId",
            "required": true,
            "description": "The ID of the flow to retrieve",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "description": "The flow object to be updated",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/Flow"
              }
            }
          }
        },
        "responses": { "200": { "description": "Array of node templates" } },
        "tags": ["Flow"]
      },
      "delete": {
        "summary": "Delete one flow (Editing sceniaro)",
        "requestBody": {
          "description": "The ID of flow object to be updated",
          "content": { "application/json": { "schema": { "type": "string" } } }
        },
        "responses": { "200": { "description": "Array of node templates" } },
        "tags": ["Flow"]
      }
    },
    "/api/flow/instances/{instanceId}": {
      "get": {
        "summary": "List all instances of a flow",
        "description": "Retrieve the details of a running flow instance, including its current status (active or complete) and the specific node that is currently being executed.",
        "parameters": [
          {
            "in": "path",
            "name": "instanceId",
            "required": true,
            "description": "The ID of the flow instance to retrieve",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "flow instance array",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/FlowInstance" }
                }
              }
            }
          }
        },
        "tags": ["Flow Instance"]
      },
      "post": {
        "summary": "Create a new instance for specific flow, happens when we start to run a flow",
        "parameters": [
          {
            "in": "path",
            "name": "instanceId",
            "required": true,
            "description": "The ID of the flow instance to retrieve",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "The ID the new flow instance",
            "content": {
              "application/json": { "schema": { "type": "string" } }
            }
          }
        },
        "tags": ["Flow Instance"]
      },
      "delete": {
        "summary": "Delete a certain instance of flow, i.e., stop running or complete running",
        "responses": {
          "200": { "description": "The ID the new flow instance" }
        },
        "tags": ["Flow Instance"]
      }
    },
    "/api/flow/instances": {
      "get": {
        "summary": "Get all the alive instances of certain flow",
        "responses": {
          "200": {
            "description": "flow instance array",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Flow" }
                }
              }
            }
          }
        },
        "tags": ["Flow Instance"]
      },
      "post": {
        "summary": "Create a new instance of certain flow, i.e., run a flow",
        "requestBody": {
          "description": "The ID of the flow to run",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": { "flowId": { "type": "string" } }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The ID the new flow instance",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": { "flowId": { "type": "string" } }
                }
              }
            }
          }
        },
        "tags": ["Flow Instance"]
      }
    },
    "/api/flow": {
      "get": {
        "summary": "Retrieve the existing flows.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Flow" }
                }
              }
            }
          }
        },
        "tags": ["Flows"]
      },
      "post": {
        "summary": "Create a new flow",
        "responses": { "200": { "description": "The ID of the new flow" } },
        "tags": ["Flows"]
      }
    },
    "/api/flow/templates/{templateType}": {
      "get": {
        "summary": "Get all the available node or flow templates",
        "parameters": [
          {
            "in": "path",
            "name": "templateType",
            "required": true,
            "description": "The type of the template, either \"node\" or \"flow\".",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "description": "An array of node or flow templates." }
        },
        "tags": ["Templates"]
      }
    },
    "/api/illustrate/prompt": {
      "post": {
        "summary": "Generate illustration prompt.",
        "description": "Generate illustration prompt for the given text.",
        "tags": ["Illustrate"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "text": {
                    "type": "string",
                    "description": "The text to generate illustration prompt."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The generated illustration prompt.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "prompt": {
                      "type": "string",
                      "description": "The generated prompt"
                    },
                    "negative_prompt": {
                      "type": "string",
                      "description": "The generated negative prompt"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/images/txt2img": {
      "get": {
        "summary": "Get image generation task state.",
        "description": "Get async image generation task state.",
        "tags": ["Image"],
        "parameters": [
          {
            "in": "query",
            "name": "task",
            "schema": {
              "type": "string",
              "description": "The task id to check."
            },
            "required": true
          },
          {
            "in": "query",
            "name": "provider",
            "schema": {
              "type": "string",
              "description": "The provider of the image generation task."
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The response for the image generation request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Project assets",
                  "$ref": "#/components/schemas/AigcResult"
                }
              }
            }
          },
          "400": { "description": "Request could not be processed." }
        }
      },
      "post": {
        "summary": "Generate image.",
        "description": "Generate image based on prompts.",
        "tags": ["Image"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "provider": {
                    "type": "string",
                    "description": "The provider of the model."
                  },
                  "model": {
                    "type": "string",
                    "description": "The stable diffusion model checkpoint to use."
                  },
                  "options": {
                    "type": "object",
                    "description": "The input parameters to use. The exact definition please refer to the coressponding provider's API spec"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for the image generation request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Project assets",
                  "$ref": "#/components/schemas/AigcResult"
                }
              }
            }
          },
          "400": { "description": "Request could not be processed." }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AigcContent": {
        "type": "object",
        "description": "The content of the AIGC document.",
        "properties": {
          "url": {
            "type": "string",
            "description": "URL for the generated content."
          },
          "seed": {
            "type": "string",
            "description": "Seed for the generated content."
          },
          "meta": {
            "type": "object",
            "description": "Meta data for the generated content."
          }
        }
      },
      "AigcResult": {
        "type": "object",
        "description": "The response entity for AIGC request.",
        "properties": {
          "state": {
            "type": "string",
            "description": "State of the task.",
            "enum": ["WorkInProgress", "Done", "Error"]
          },
          "taskId": {
            "type": "string",
            "description": "The task's ID for an async task."
          },
          "contents": {
            "type": "array",
            "description": "The array of generated contents.",
            "items": {
              "type": "object",
              "description": "Project's assets",
              "$ref": "#/components/schemas/AigcContent"
            }
          },
          "progress": {
            "type": "number",
            "description": "The percentage of async task completed."
          },
          "progressLabel": {
            "type": "string",
            "description": "The text version of the task progress."
          },
          "eta": {
            "type": "number",
            "description": "Estimated Time of Arrival."
          },
          "meta": {
            "type": "object",
            "description": "Meta data for the response."
          }
        }
      },
      "FlowInstance": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the flow instance."
          },
          "name": {
            "type": "string",
            "description": "The name of the flow instance."
          }
        }
      },
      "Flow": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "description": "The ID of the flow." },
          "name": { "type": "string", "description": "The name of the flow." }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Flow Instance",
      "description": "Flow instance related manipulations"
    },
    {
      "name": "Templates",
      "description": "Read-only access to node and flow templates."
    }
  ]
}
